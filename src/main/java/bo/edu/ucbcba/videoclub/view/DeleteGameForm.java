package bo.edu.ucbcba.videoclub.view;

import bo.edu.ucbcba.videoclub.controller.GameController;
import bo.edu.ucbcba.videoclub.model.Game;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

/**
 * Created by privado on 18/05/2016.
 */
public class DeleteGameForm extends JFrame {
    private JTable gamesTable;
    private JTextField searchText;
    private JButton deleteButton;
    private JPanel rootPanel;
    private GameController gameController;

    public DeleteGameForm(JFrame parent) {
        super("View Clients");
        setContentPane(rootPanel);
        setSize(600, 400);
        pack();
        setResizable(true);
        gameController = new GameController();
        populateTable();
        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                deleteGame();
                populateTable("");
            }
        });
    }

    private void deleteGame() {
        if (searchText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Invalid Game Title ", "ERROR", JOptionPane.INFORMATION_MESSAGE);
        } else {
            if (gameController.deleteGame(searchText.getText())) {
                JOptionPane.showMessageDialog(this, "Game Deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else
                JOptionPane.showMessageDialog(this, "Invalid Game Title ", "ERROR", JOptionPane.INFORMATION_MESSAGE);
        }
    }


    private void populateTable() {
        List<Game> clients = gameController.searchGames(searchText.getText());
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Title");
        model.addColumn("Description");
        model.addColumn("Realease Year");
        model.addColumn("Company");
        model.addColumn("Price");
        model.addColumn("Rating");

        gamesTable.setModel(model);

        for (Game c : clients) {
            Object[] row = new Object[6];

            row[0] = c.getTitle();
            row[1] = c.getDescription();
            row[2] = c.getReleaseYear();
            row[3] = c.getCompany();
            row[4] = c.getPrice();
            row[5] = c.getRating();
            model.addRow(row);
        }
    }

    private void populateTable(String g) {
        List<Game> clients = gameController.searchGames(g);
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Title");
        model.addColumn("Description");
        model.addColumn("Realease Year");
        model.addColumn("Company");
        model.addColumn("Price");
        model.addColumn("Rating");

        gamesTable.setModel(model);

        for (Game c : clients) {
            Object[] row = new Object[6];

            row[0] = c.getTitle();
            row[1] = c.getDescription();
            row[2] = c.getReleaseYear();
            row[3] = c.getCompany();
            row[4] = c.getPrice();
            row[5] = c.getRating();
            model.addRow(row);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(4, 6, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.setBackground(new Color(-3090213));
        final JLabel label1 = new JLabel();
        label1.setFont(new Font("Courier New", Font.BOLD, 20));
        label1.setForeground(new Color(-4486332));
        label1.setText("Delete Game");
        rootPanel.add(label1, new GridConstraints(0, 1, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        rootPanel.add(spacer1, new GridConstraints(2, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        gamesTable = new JTable();
        gamesTable.setEnabled(false);
        gamesTable.setForeground(new Color(-11948357));
        rootPanel.add(gamesTable, new GridConstraints(2, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(800, 300), null, 0, false));
        searchText = new JTextField();
        rootPanel.add(searchText, new GridConstraints(1, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setFont(new Font("Courier New", Font.BOLD, 18));
        label2.setForeground(new Color(-4486332));
        label2.setText("Title:");
        rootPanel.add(label2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteButton = new JButton();
        deleteButton.setBackground(new Color(-12828863));
        deleteButton.setForeground(new Color(-4486332));
        deleteButton.setText("Delete");
        rootPanel.add(deleteButton, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        rootPanel.add(spacer2, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(50, 50), null, new Dimension(50, 50), 0, false));
        final Spacer spacer3 = new Spacer();
        rootPanel.add(spacer3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(50, 50), null, new Dimension(50, 50), 0, false));
        final Spacer spacer4 = new Spacer();
        rootPanel.add(spacer4, new GridConstraints(1, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(50, 50), null, new Dimension(50, 50), 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
