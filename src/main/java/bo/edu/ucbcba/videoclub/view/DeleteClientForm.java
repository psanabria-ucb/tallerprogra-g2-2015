package bo.edu.ucbcba.videoclub.view;

import bo.edu.ucbcba.videoclub.controller.ClientController;
import bo.edu.ucbcba.videoclub.model.Client;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;

public class DeleteClientForm extends JFrame {
    private JTextField searchText;
    private JTable clientsTable;
    private JButton deleteButton;
    private JPanel rootPanel;
    private ClientController clientController;

    public DeleteClientForm(JFrame parent) {
        super("View Clients");
        setContentPane(rootPanel);
        this.setLocationRelativeTo(null);
        setSize(1000, 600);
        pack();
        setResizable(false);
        launchImage();
        clientController = new ClientController();
        populateTable();
        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, " Are You sure you want to Delete this user? ", " Warning! ", dialogButton);
                if (dialogResult == JOptionPane.YES_OPTION) {
                    deleteClient();
                    populateTable("");
                    searchText.setText("");
                }
            }
        });
    }

    private void deleteClient() {

        if (searchText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "User CI is empty ", "ERROR", JOptionPane.INFORMATION_MESSAGE);
        } else {
            switch (clientController.deleteClient(searchText.getText())) {
                case 1:
                    JOptionPane.showMessageDialog(this, "Client Deleted successfully", "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                    break;

                case 2:
                    JOptionPane.showMessageDialog(this, "No client has the CI: '" + searchText.getText() + "'", "ERROR", JOptionPane.INFORMATION_MESSAGE);
                    break;

                default:
                    break;
            }
        }
    }


    private void populateTable() {
        List<Client> clients = clientController.searchClient(searchText.getText());
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("CI");
        model.addColumn("First Name");
        model.addColumn("Last Name");
        model.addColumn("Address");

        clientsTable.setModel(model);

        for (Client c : clients) {
            Object[] row = new Object[4];

            row[0] = c.getCi();
            row[1] = c.getFirstname();
            row[2] = c.getLastname();
            row[3] = c.getAddress();
            model.addRow(row);
        }
    }

    private void populateTable(String g) {
        List<Client> clients = clientController.searchClient(g);
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("CI");
        model.addColumn("First Name");
        model.addColumn("Last Name");
        model.addColumn("Address");

        clientsTable.setModel(model);

        for (Client c : clients) {
            Object[] row = new Object[4];

            row[0] = c.getCi();
            row[1] = c.getFirstname();
            row[2] = c.getLastname();
            row[3] = c.getAddress();
            model.addRow(row);
        }
    }

    private void launchImage() {
        BufferedImage myPicture = null;
        try {
            myPicture = ImageIO.read(new File("probando10.jpg"));
        } catch (IOException e) {
            e.printStackTrace();
        }

        JLabel label = new JLabel(new ImageIcon(myPicture));
        ((JPanel) getContentPane()).setOpaque(false);
        getLayeredPane().add(label, JLayeredPane.FRAME_CONTENT_LAYER);
        label.setBounds(0, 0, myPicture.getWidth(), myPicture.getHeight());

    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(4, 6, new Insets(20, 0, 0, 0), -1, -1));
        rootPanel.setBackground(new Color(-3090213));
        rootPanel.setForeground(new Color(-3090213));
        searchText = new JTextField();
        rootPanel.add(searchText, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setFont(new Font("Courier New", Font.BOLD, 30));
        label1.setForeground(new Color(-4477584));
        label1.setText("Delete Client");
        rootPanel.add(label1, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteButton = new JButton();
        deleteButton.setBackground(new Color(-12828863));
        deleteButton.setFont(new Font("Courier New", Font.BOLD, 18));
        deleteButton.setForeground(new Color(-4486332));
        deleteButton.setIcon(new ImageIcon(getClass().getResource("/icons/minus-sign.png")));
        deleteButton.setText("Delete");
        rootPanel.add(deleteButton, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setFont(new Font("Courier New", Font.BOLD, 20));
        label2.setForeground(new Color(-4486332));
        label2.setText("CI:");
        rootPanel.add(label2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        rootPanel.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(50, 50), null, new Dimension(50, 50), 0, false));
        final Spacer spacer2 = new Spacer();
        rootPanel.add(spacer2, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(50, 50), null, new Dimension(50, 50), 0, false));
        final Spacer spacer3 = new Spacer();
        rootPanel.add(spacer3, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(50, 50), null, new Dimension(50, 50), 0, false));
        clientsTable = new JTable();
        clientsTable.setEnabled(false);
        clientsTable.setFont(new Font("Courier New", clientsTable.getFont().getStyle(), 18));
        clientsTable.setForeground(new Color(-11948357));
        clientsTable.setRowHeight(20);
        rootPanel.add(clientsTable, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(800, 300), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
