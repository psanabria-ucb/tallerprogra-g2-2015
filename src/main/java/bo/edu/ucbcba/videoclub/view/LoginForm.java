package bo.edu.ucbcba.videoclub.view;

import bo.edu.ucbcba.videoclub.controller.Session;
import bo.edu.ucbcba.videoclub.controller.UserController;
import bo.edu.ucbcba.videoclub.exceptions.ValidationException;
import bo.edu.ucbcba.videoclub.model.User;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

/**
 * Created by privado on 29/05/2016.
 */
public class LoginForm extends JFrame {
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JPanel rootPane;
    private JButton loginButton;
    private UserController userController;

    public LoginForm() {
        super("Login | Sakila 2.0");
        setContentPane(rootPane);
        setSize(650, 320);
        this.setLocationRelativeTo(null);
        setResizable(false);
        userController = new UserController();

        switch (userController.verifyExistenceofAdminAndStaff()) {
            case 1:
                CreateUserAdmin();
                CreateUserStaff();
                break;
            case 2:
                CreateUserStaff();
                break;
            case 3:
                CreateUserAdmin();
                break;
            case 4:
                break;
        }


        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int a;
                a = userController.getUsertype(usernameField.getText());
                if (ValidateUser()) {
                    Session.getSession().setUsername(usernameField.getText());
                    Session.getSession().setUsertype(a);
                    //Mensaje("El tipo de usuario es: " + Session.getSession().getUsername() + " Con tipo de usuario: " + Session.getSession().getUtype());
                    goInitialForm();
                } else
                    invalidUser();
            }
        });
        launchImage();
    }

    public void goInitialForm() {
        this.setVisible(false);
        InitialForm form = new InitialForm();
        form.setVisible(true);
        form.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    }

    private void Mensaje(String s) {
        JOptionPane.showMessageDialog(this, s, "Success", JOptionPane.INFORMATION_MESSAGE);
    }

    private void CreateUserStaff() {
        userController.create("staff", "staff123", 2);
        //JOptionPane.showMessageDialog(this, "User created successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
    }

    private void CreateUserAdmin() {
        userController.create("admin", "admin123", 1);
        //JOptionPane.showMessageDialog(this, "User created successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
    }

    public void invalidUser() {
        JOptionPane.showMessageDialog(this, "Username or Password are not correct", "Authentication Error", JOptionPane.INFORMATION_MESSAGE);
    }

    public boolean ValidateUser() {
        String usr = usernameField.getText();
        String pswd = passwordField.getText();
        if (!usr.isEmpty()) {
            if (!pswd.isEmpty()) {
                if (userController.validateUser(usr, pswd))
                    return true;
            } else {
                JOptionPane.showMessageDialog(this, "Password can't be blank", "Authentication Error", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Username can't be blank", "Authentication Error", JOptionPane.INFORMATION_MESSAGE);
        }
        return false;
    }

    private void launchImage() {
        BufferedImage myPicture = null;
        try {
            myPicture = ImageIO.read(new File("probando4.jpg"));
        } catch (IOException e) {
            e.printStackTrace();
        }

        JLabel label = new JLabel(new ImageIcon(myPicture));
        ((JPanel) getContentPane()).setOpaque(false);
        getLayeredPane().add(label, JLayeredPane.FRAME_CONTENT_LAYER);
        label.setBounds(0, 0, myPicture.getWidth(), myPicture.getHeight());

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPane = new JPanel();
        rootPane.setLayout(new GridLayoutManager(7, 4, new Insets(40, 100, 40, 60), -1, -1));
        rootPane.setBackground(new Color(-3090213));
        final JLabel label1 = new JLabel();
        label1.setBackground(new Color(-12828863));
        label1.setFont(new Font("Courier New", Font.BOLD, 28));
        label1.setForeground(new Color(-4477584));
        label1.setText("Login Yourself");
        rootPane.add(label1, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setBackground(new Color(-12828863));
        label2.setFont(new Font("Courier New", Font.BOLD, 18));
        label2.setForeground(new Color(-4486332));
        label2.setText("Username:");
        rootPane.add(label2, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setBackground(new Color(-12828863));
        label3.setFont(new Font("Courier New", Font.BOLD, 18));
        label3.setForeground(new Color(-4486332));
        label3.setText("Password:");
        rootPane.add(label3, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        usernameField = new JTextField();
        usernameField.setBackground(new Color(-4477584));
        usernameField.setFont(new Font("Courier New", usernameField.getFont().getStyle(), 16));
        usernameField.setForeground(new Color(-12504532));
        rootPane.add(usernameField, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(350, 30), null, 0, false));
        passwordField = new JPasswordField();
        passwordField.setBackground(new Color(-4477584));
        passwordField.setFont(new Font("Courier New", passwordField.getFont().getStyle(), 16));
        passwordField.setForeground(new Color(-12504532));
        rootPane.add(passwordField, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(350, 30), null, 0, false));
        loginButton = new JButton();
        loginButton.setBackground(new Color(-12828863));
        loginButton.setFont(new Font("Courier New", loginButton.getFont().getStyle(), 18));
        loginButton.setForeground(new Color(-4486332));
        loginButton.setText("Login");
        rootPane.add(loginButton, new GridConstraints(6, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(120, 30), null, new Dimension(120, 30), 0, false));
        final JLabel label4 = new JLabel();
        label4.setBackground(new Color(-12828863));
        label4.setFont(new Font("Courier New", Font.BOLD, 32));
        label4.setForeground(new Color(-8692948));
        label4.setText("Welcome to Sakila 2.0");
        rootPane.add(label4, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        rootPane.add(spacer1, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(20, 20), new Dimension(20, 20), new Dimension(20, 20), 0, false));
        final Spacer spacer2 = new Spacer();
        rootPane.add(spacer2, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(10, 10), new Dimension(10, 10), new Dimension(10, 10), 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPane;
    }
}
